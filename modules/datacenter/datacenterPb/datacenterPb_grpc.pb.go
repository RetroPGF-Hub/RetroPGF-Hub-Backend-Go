// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: modules/datacenter/datacenterPb/datacenterPb.proto

package RetroPGF_Hub_Backend_Go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataCenterGrpcServiceClient is the client API for DataCenterGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataCenterGrpcServiceClient interface {
	GetProjectDataCenter(ctx context.Context, in *GetProjectDataCenterReq, opts ...grpc.CallOption) (*GetProjectDataCenterRes, error)
	GetSingleProjectDataCenter(ctx context.Context, in *GetSingleProjectDataCenterReq, opts ...grpc.CallOption) (*GetSingleProjectDataCenterRes, error)
}

type dataCenterGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataCenterGrpcServiceClient(cc grpc.ClientConnInterface) DataCenterGrpcServiceClient {
	return &dataCenterGrpcServiceClient{cc}
}

func (c *dataCenterGrpcServiceClient) GetProjectDataCenter(ctx context.Context, in *GetProjectDataCenterReq, opts ...grpc.CallOption) (*GetProjectDataCenterRes, error) {
	out := new(GetProjectDataCenterRes)
	err := c.cc.Invoke(ctx, "/DataCenterGrpcService/GetProjectDataCenter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataCenterGrpcServiceClient) GetSingleProjectDataCenter(ctx context.Context, in *GetSingleProjectDataCenterReq, opts ...grpc.CallOption) (*GetSingleProjectDataCenterRes, error) {
	out := new(GetSingleProjectDataCenterRes)
	err := c.cc.Invoke(ctx, "/DataCenterGrpcService/GetSingleProjectDataCenter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataCenterGrpcServiceServer is the server API for DataCenterGrpcService service.
// All implementations must embed UnimplementedDataCenterGrpcServiceServer
// for forward compatibility
type DataCenterGrpcServiceServer interface {
	GetProjectDataCenter(context.Context, *GetProjectDataCenterReq) (*GetProjectDataCenterRes, error)
	GetSingleProjectDataCenter(context.Context, *GetSingleProjectDataCenterReq) (*GetSingleProjectDataCenterRes, error)
	mustEmbedUnimplementedDataCenterGrpcServiceServer()
}

// UnimplementedDataCenterGrpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataCenterGrpcServiceServer struct {
}

func (UnimplementedDataCenterGrpcServiceServer) GetProjectDataCenter(context.Context, *GetProjectDataCenterReq) (*GetProjectDataCenterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectDataCenter not implemented")
}
func (UnimplementedDataCenterGrpcServiceServer) GetSingleProjectDataCenter(context.Context, *GetSingleProjectDataCenterReq) (*GetSingleProjectDataCenterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleProjectDataCenter not implemented")
}
func (UnimplementedDataCenterGrpcServiceServer) mustEmbedUnimplementedDataCenterGrpcServiceServer() {}

// UnsafeDataCenterGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataCenterGrpcServiceServer will
// result in compilation errors.
type UnsafeDataCenterGrpcServiceServer interface {
	mustEmbedUnimplementedDataCenterGrpcServiceServer()
}

func RegisterDataCenterGrpcServiceServer(s grpc.ServiceRegistrar, srv DataCenterGrpcServiceServer) {
	s.RegisterService(&DataCenterGrpcService_ServiceDesc, srv)
}

func _DataCenterGrpcService_GetProjectDataCenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectDataCenterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCenterGrpcServiceServer).GetProjectDataCenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataCenterGrpcService/GetProjectDataCenter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCenterGrpcServiceServer).GetProjectDataCenter(ctx, req.(*GetProjectDataCenterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataCenterGrpcService_GetSingleProjectDataCenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSingleProjectDataCenterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataCenterGrpcServiceServer).GetSingleProjectDataCenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DataCenterGrpcService/GetSingleProjectDataCenter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataCenterGrpcServiceServer).GetSingleProjectDataCenter(ctx, req.(*GetSingleProjectDataCenterReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DataCenterGrpcService_ServiceDesc is the grpc.ServiceDesc for DataCenterGrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataCenterGrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DataCenterGrpcService",
	HandlerType: (*DataCenterGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProjectDataCenter",
			Handler:    _DataCenterGrpcService_GetProjectDataCenter_Handler,
		},
		{
			MethodName: "GetSingleProjectDataCenter",
			Handler:    _DataCenterGrpcService_GetSingleProjectDataCenter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modules/datacenter/datacenterPb/datacenterPb.proto",
}
