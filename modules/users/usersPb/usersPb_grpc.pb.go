// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: modules/users/usersPb/usersPb.proto

package RetroPGF_Hub_Backend_Go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UsersGrpcServiceClient is the client API for UsersGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersGrpcServiceClient interface {
	GetUserInfoById(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoRes, error)
	GetManyUserInfoForProject(ctx context.Context, in *GetManyUserInfoForProjectReq, opts ...grpc.CallOption) (*GetManyUserInfoForProjectRes, error)
}

type usersGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersGrpcServiceClient(cc grpc.ClientConnInterface) UsersGrpcServiceClient {
	return &usersGrpcServiceClient{cc}
}

func (c *usersGrpcServiceClient) GetUserInfoById(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoRes, error) {
	out := new(GetUserInfoRes)
	err := c.cc.Invoke(ctx, "/UsersGrpcService/GetUserInfoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersGrpcServiceClient) GetManyUserInfoForProject(ctx context.Context, in *GetManyUserInfoForProjectReq, opts ...grpc.CallOption) (*GetManyUserInfoForProjectRes, error) {
	out := new(GetManyUserInfoForProjectRes)
	err := c.cc.Invoke(ctx, "/UsersGrpcService/GetManyUserInfoForProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersGrpcServiceServer is the server API for UsersGrpcService service.
// All implementations must embed UnimplementedUsersGrpcServiceServer
// for forward compatibility
type UsersGrpcServiceServer interface {
	GetUserInfoById(context.Context, *GetUserInfoReq) (*GetUserInfoRes, error)
	GetManyUserInfoForProject(context.Context, *GetManyUserInfoForProjectReq) (*GetManyUserInfoForProjectRes, error)
	mustEmbedUnimplementedUsersGrpcServiceServer()
}

// UnimplementedUsersGrpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUsersGrpcServiceServer struct {
}

func (UnimplementedUsersGrpcServiceServer) GetUserInfoById(context.Context, *GetUserInfoReq) (*GetUserInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoById not implemented")
}
func (UnimplementedUsersGrpcServiceServer) GetManyUserInfoForProject(context.Context, *GetManyUserInfoForProjectReq) (*GetManyUserInfoForProjectRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManyUserInfoForProject not implemented")
}
func (UnimplementedUsersGrpcServiceServer) mustEmbedUnimplementedUsersGrpcServiceServer() {}

// UnsafeUsersGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersGrpcServiceServer will
// result in compilation errors.
type UnsafeUsersGrpcServiceServer interface {
	mustEmbedUnimplementedUsersGrpcServiceServer()
}

func RegisterUsersGrpcServiceServer(s grpc.ServiceRegistrar, srv UsersGrpcServiceServer) {
	s.RegisterService(&UsersGrpcService_ServiceDesc, srv)
}

func _UsersGrpcService_GetUserInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersGrpcServiceServer).GetUserInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersGrpcService/GetUserInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersGrpcServiceServer).GetUserInfoById(ctx, req.(*GetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersGrpcService_GetManyUserInfoForProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManyUserInfoForProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersGrpcServiceServer).GetManyUserInfoForProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersGrpcService/GetManyUserInfoForProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersGrpcServiceServer).GetManyUserInfoForProject(ctx, req.(*GetManyUserInfoForProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UsersGrpcService_ServiceDesc is the grpc.ServiceDesc for UsersGrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersGrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UsersGrpcService",
	HandlerType: (*UsersGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfoById",
			Handler:    _UsersGrpcService_GetUserInfoById_Handler,
		},
		{
			MethodName: "GetManyUserInfoForProject",
			Handler:    _UsersGrpcService_GetManyUserInfoForProject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modules/users/usersPb/usersPb.proto",
}
