// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: modules/favorite/favPb/favPb.proto

package RetroPGF_Hub_Backend_Go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FavGrpcServiceClient is the client API for FavGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FavGrpcServiceClient interface {
	CreateFavProject(ctx context.Context, in *CreateFavProjectReq, opts ...grpc.CallOption) (*CreateFavProjectRes, error)
	DeleteFavProject(ctx context.Context, in *DeleteFavProjectReq, opts ...grpc.CallOption) (*DeleteFavProjectRes, error)
}

type favGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFavGrpcServiceClient(cc grpc.ClientConnInterface) FavGrpcServiceClient {
	return &favGrpcServiceClient{cc}
}

func (c *favGrpcServiceClient) CreateFavProject(ctx context.Context, in *CreateFavProjectReq, opts ...grpc.CallOption) (*CreateFavProjectRes, error) {
	out := new(CreateFavProjectRes)
	err := c.cc.Invoke(ctx, "/FavGrpcService/CreateFavProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favGrpcServiceClient) DeleteFavProject(ctx context.Context, in *DeleteFavProjectReq, opts ...grpc.CallOption) (*DeleteFavProjectRes, error) {
	out := new(DeleteFavProjectRes)
	err := c.cc.Invoke(ctx, "/FavGrpcService/DeleteFavProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FavGrpcServiceServer is the server API for FavGrpcService service.
// All implementations must embed UnimplementedFavGrpcServiceServer
// for forward compatibility
type FavGrpcServiceServer interface {
	CreateFavProject(context.Context, *CreateFavProjectReq) (*CreateFavProjectRes, error)
	DeleteFavProject(context.Context, *DeleteFavProjectReq) (*DeleteFavProjectRes, error)
	mustEmbedUnimplementedFavGrpcServiceServer()
}

// UnimplementedFavGrpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFavGrpcServiceServer struct {
}

func (UnimplementedFavGrpcServiceServer) CreateFavProject(context.Context, *CreateFavProjectReq) (*CreateFavProjectRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFavProject not implemented")
}
func (UnimplementedFavGrpcServiceServer) DeleteFavProject(context.Context, *DeleteFavProjectReq) (*DeleteFavProjectRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFavProject not implemented")
}
func (UnimplementedFavGrpcServiceServer) mustEmbedUnimplementedFavGrpcServiceServer() {}

// UnsafeFavGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FavGrpcServiceServer will
// result in compilation errors.
type UnsafeFavGrpcServiceServer interface {
	mustEmbedUnimplementedFavGrpcServiceServer()
}

func RegisterFavGrpcServiceServer(s grpc.ServiceRegistrar, srv FavGrpcServiceServer) {
	s.RegisterService(&FavGrpcService_ServiceDesc, srv)
}

func _FavGrpcService_CreateFavProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFavProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavGrpcServiceServer).CreateFavProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FavGrpcService/CreateFavProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavGrpcServiceServer).CreateFavProject(ctx, req.(*CreateFavProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FavGrpcService_DeleteFavProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFavProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FavGrpcServiceServer).DeleteFavProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FavGrpcService/DeleteFavProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FavGrpcServiceServer).DeleteFavProject(ctx, req.(*DeleteFavProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FavGrpcService_ServiceDesc is the grpc.ServiceDesc for FavGrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FavGrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FavGrpcService",
	HandlerType: (*FavGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFavProject",
			Handler:    _FavGrpcService_CreateFavProject_Handler,
		},
		{
			MethodName: "DeleteFavProject",
			Handler:    _FavGrpcService_DeleteFavProject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modules/favorite/favPb/favPb.proto",
}
